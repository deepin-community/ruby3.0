Backport of:

From c58c5f54f1eab99665ea6a161d29ff6a7490afc8 Mon Sep 17 00:00:00 2001
From: Nobuyoshi Nakada <nobu@ruby-lang.org>
Date: Tue, 16 Nov 2021 17:39:32 +0900
Subject: [PATCH] [ruby/stringio] Fix expanding size at ungetc/ungetbyte

https://github.com/ruby/stringio/commit/a35268a3ac
---
 ext/stringio/stringio.c        |  2 +-
 test/stringio/test_stringio.rb | 25 +++++++++++++++++++++----
 2 files changed, 22 insertions(+), 5 deletions(-)

--- a/ext/stringio/stringio.c
+++ b/ext/stringio/stringio.c
@@ -976,7 +976,7 @@ strio_unget_bytes(struct StringIO *ptr,
     len = RSTRING_LEN(str);
     rest = pos - len;
     if (cl > pos) {
-	long ex = (rest < 0 ? cl-pos : cl+rest);
+	long ex = cl - (rest < 0 ? pos : len);
 	rb_str_modify_expand(str, ex);
 	rb_str_set_len(str, len + ex);
 	s = RSTRING_PTR(str);
--- a/test/stringio/test_stringio.rb
+++ b/test/stringio/test_stringio.rb
@@ -730,6 +730,15 @@ class TestStringIO < Test::Unit::TestCas
     assert_equal("b""\0""a", s.string)
   end
 
+  def test_ungetc_fill
+    count = 100
+    s = StringIO.new
+    s.print 'a' * count
+    s.ungetc('b' * (count * 5))
+    assert_equal((count * 5), s.string.size)
+    assert_match(/\Ab+\z/, s.string)
+  end
+
   def test_ungetbyte_pos
     b = '\\b00010001 \\B00010001 \\b1 \\B1 \\b000100011'
     s = StringIO.new( b )
@@ -755,6 +764,15 @@ class TestStringIO < Test::Unit::TestCas
     assert_equal("b""\0""a", s.string)
   end
 
+  def test_ungetbyte_fill
+    count = 100
+    s = StringIO.new
+    s.print 'a' * count
+    s.ungetbyte('b' * (count * 5))
+    assert_equal((count * 5), s.string.size)
+    assert_match(/\Ab+\z/, s.string)
+  end
+
   def test_frozen
     s = StringIO.new
     s.freeze
@@ -798,18 +816,17 @@ class TestStringIO < Test::Unit::TestCas
   end
 
   def test_overflow
-    skip if RbConfig::SIZEOF["void*"] > RbConfig::SIZEOF["long"]
+    return if RbConfig::SIZEOF["void*"] > RbConfig::SIZEOF["long"]
     limit = RbConfig::LIMITS["INTPTR_MAX"] - 0x10
     assert_separately(%w[-rstringio], "#{<<-"begin;"}\n#{<<-"end;"}")
     begin;
       limit = #{limit}
       ary = []
-      while true
+      begin
         x = "a"*0x100000
         break if [x].pack("p").unpack("i!")[0] < 0
         ary << x
-        skip if ary.size > 100
-      end
+      end while ary.size <= 100
       s = StringIO.new(x)
       s.gets("xxx", limit)
       assert_equal(0x100000, s.pos)
